/*
 * Token Tracker Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StripeEventData;
import org.openapitools.client.model.StripeEventRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce_Tokentracker.JSON;

/**
 * TokentrackerStripeWebhookRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-14T09:02:19.138901619Z[Etc/UTC]")
public class TokentrackerStripeWebhookRequest {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private StripeEventData data;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_API_VERSION = "apiVersion";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LIVEMODE = "livemode";
  @SerializedName(SERIALIZED_NAME_LIVEMODE)
  private Boolean livemode;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object;

  public static final String SERIALIZED_NAME_PENDING_WEBHOOKS = "pendingWebhooks";
  @SerializedName(SERIALIZED_NAME_PENDING_WEBHOOKS)
  private String pendingWebhooks;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private StripeEventRequest request;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public TokentrackerStripeWebhookRequest() {
  }

  public TokentrackerStripeWebhookRequest data(StripeEventData data) {
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  public StripeEventData getData() {
    return data;
  }

  public void setData(StripeEventData data) {
    this.data = data;
  }


  public TokentrackerStripeWebhookRequest account(String account) {
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  public TokentrackerStripeWebhookRequest apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

   /**
   * Get apiVersion
   * @return apiVersion
  **/
  @javax.annotation.Nullable
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public TokentrackerStripeWebhookRequest created(String created) {
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public TokentrackerStripeWebhookRequest id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TokentrackerStripeWebhookRequest livemode(Boolean livemode) {
    this.livemode = livemode;
    return this;
  }

   /**
   * Get livemode
   * @return livemode
  **/
  @javax.annotation.Nullable
  public Boolean getLivemode() {
    return livemode;
  }

  public void setLivemode(Boolean livemode) {
    this.livemode = livemode;
  }


  public TokentrackerStripeWebhookRequest _object(String _object) {
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nullable
  public String getObject() {
    return _object;
  }

  public void setObject(String _object) {
    this._object = _object;
  }


  public TokentrackerStripeWebhookRequest pendingWebhooks(String pendingWebhooks) {
    this.pendingWebhooks = pendingWebhooks;
    return this;
  }

   /**
   * Get pendingWebhooks
   * @return pendingWebhooks
  **/
  @javax.annotation.Nullable
  public String getPendingWebhooks() {
    return pendingWebhooks;
  }

  public void setPendingWebhooks(String pendingWebhooks) {
    this.pendingWebhooks = pendingWebhooks;
  }


  public TokentrackerStripeWebhookRequest request(StripeEventRequest request) {
    this.request = request;
    return this;
  }

   /**
   * Get request
   * @return request
  **/
  @javax.annotation.Nullable
  public StripeEventRequest getRequest() {
    return request;
  }

  public void setRequest(StripeEventRequest request) {
    this.request = request;
  }


  public TokentrackerStripeWebhookRequest type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokentrackerStripeWebhookRequest tokentrackerStripeWebhookRequest = (TokentrackerStripeWebhookRequest) o;
    return Objects.equals(this.data, tokentrackerStripeWebhookRequest.data) &&
        Objects.equals(this.account, tokentrackerStripeWebhookRequest.account) &&
        Objects.equals(this.apiVersion, tokentrackerStripeWebhookRequest.apiVersion) &&
        Objects.equals(this.created, tokentrackerStripeWebhookRequest.created) &&
        Objects.equals(this.id, tokentrackerStripeWebhookRequest.id) &&
        Objects.equals(this.livemode, tokentrackerStripeWebhookRequest.livemode) &&
        Objects.equals(this._object, tokentrackerStripeWebhookRequest._object) &&
        Objects.equals(this.pendingWebhooks, tokentrackerStripeWebhookRequest.pendingWebhooks) &&
        Objects.equals(this.request, tokentrackerStripeWebhookRequest.request) &&
        Objects.equals(this.type, tokentrackerStripeWebhookRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, account, apiVersion, created, id, livemode, _object, pendingWebhooks, request, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokentrackerStripeWebhookRequest {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    livemode: ").append(toIndentedString(livemode)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    pendingWebhooks: ").append(toIndentedString(pendingWebhooks)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("account");
    openapiFields.add("apiVersion");
    openapiFields.add("created");
    openapiFields.add("id");
    openapiFields.add("livemode");
    openapiFields.add("object");
    openapiFields.add("pendingWebhooks");
    openapiFields.add("request");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TokentrackerStripeWebhookRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokentrackerStripeWebhookRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokentrackerStripeWebhookRequest is not found in the empty JSON string", TokentrackerStripeWebhookRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TokentrackerStripeWebhookRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TokentrackerStripeWebhookRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `data`
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) {
        StripeEventData.validateJsonElement(jsonObj.get("data"));
      }
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) && !jsonObj.get("apiVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiVersion").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if ((jsonObj.get("pendingWebhooks") != null && !jsonObj.get("pendingWebhooks").isJsonNull()) && !jsonObj.get("pendingWebhooks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pendingWebhooks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pendingWebhooks").toString()));
      }
      // validate the optional field `request`
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) {
        StripeEventRequest.validateJsonElement(jsonObj.get("request"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokentrackerStripeWebhookRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokentrackerStripeWebhookRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokentrackerStripeWebhookRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokentrackerStripeWebhookRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TokentrackerStripeWebhookRequest>() {
           @Override
           public void write(JsonWriter out, TokentrackerStripeWebhookRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TokentrackerStripeWebhookRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TokentrackerStripeWebhookRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokentrackerStripeWebhookRequest
  * @throws IOException if the JSON string is invalid with respect to TokentrackerStripeWebhookRequest
  */
  public static TokentrackerStripeWebhookRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokentrackerStripeWebhookRequest.class);
  }

 /**
  * Convert an instance of TokentrackerStripeWebhookRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

